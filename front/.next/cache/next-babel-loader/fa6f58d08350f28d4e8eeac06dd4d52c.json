{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSage);\n\nimport { all, fork, call, take, put, takeEvery, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from \"../reducers/post\";\n/* ### 게시물 추가 ### */\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_POST_SUCCESS // data: result.data,\n\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSage() {\n  return _regeneratorRuntime.wrap(function postSage$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/dngur/Desktop/porject/sns/front/sagas/post.js"],"names":["addPost","watchAddPost","postSage","all","fork","call","take","put","takeEvery","takeLatest","delay","axios","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","addPostAPI","data","post","action","type","response"],"mappings":";;oDAsBUA,O;qDAgBAC,Y;qDAIeC,Q;;AA1CzB,SACEC,GADF,EAEEC,IAFF,EAGEC,IAHF,EAIEC,IAJF,EAKEC,GALF,EAMEC,SANF,EAOEC,UAPF,EAQEC,KARF,QASO,oBATP;AAUA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,gBAHF,QAIO,kBAJP;AAMA;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOL,KAAK,CAACM,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AAED,SAAUhB,OAAV,CAAkBkB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAMR,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMH,GAAG,CAAC;AACRY,YAAAA,IAAI,EAAEL,gBADE,CAER;;AAFQ,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASI,iBAAMP,GAAG,CAAC;AACRY,YAAAA,IAAI,EAAEP,gBADE;AAERI,YAAAA,IAAI,EAAE,YAAII,QAAJ,CAAaJ;AAFX,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUf,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMQ,UAAU,CAACI,gBAAD,EAAmBb,OAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACH,YAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  call,\r\n  take,\r\n  put,\r\n  takeEvery,\r\n  takeLatest,\r\n  delay,\r\n} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\n\r\n/* ### 게시물 추가 ### */\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      // data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nexport default function* postSage() {\r\n  yield all([fork(watchAddPost)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}