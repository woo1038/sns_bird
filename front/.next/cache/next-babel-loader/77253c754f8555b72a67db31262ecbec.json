{"ast":null,"code":"import { all, fork, call, take, put, takeEvery, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport shortid from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\n/* ### 게시물 추가 ### */\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        data: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n/* ### 댓글 추가 ### */\n\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchCommentPost() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSage() {\n  yield all([fork(watchAddPost), fork(watchCommentPost)]);\n}","map":{"version":3,"sources":["C:/Users/dngur/Desktop/porject/sns/front/sagas/post.js"],"names":["all","fork","call","take","put","takeEvery","takeLatest","delay","axios","shortid","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","addPostAPI","data","post","addPost","action","id","generate","type","err","error","response","addCommentAPI","postId","addComment","watchAddPost","watchCommentPost","postSage"],"mappings":"AAAA,SACEA,GADF,EAEEC,IAFF,EAGEC,IAHF,EAIEC,IAJF,EAKEC,GALF,EAMEC,SANF,EAOEC,UAPF,EAQEC,KARF,QASO,oBATP;AAUA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,gBAJF,EAKEC,gBALF,EAMEC,gBANF,QAOO,kBAPP;AAQA,SAASC,cAAT,QAA+B,kBAA/B;AAEA;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOV,KAAK,CAACW,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF;AACA,UAAMd,KAAK,CAAC,IAAD,CAAX;AACA,UAAMe,EAAE,GAAGb,OAAO,CAACc,QAAR,EAAX;AACA,UAAMnB,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAET,gBADE;AAERG,MAAAA,IAAI,EAAE;AACJI,QAAAA,EADI;AAEJJ,QAAAA,IAAI,EAAEG,MAAM,CAACH;AAFT;AAFE,KAAD,CAAT;AAOA,UAAMd,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAER;AADE,KAAD,CAAT;AAGD,GAdD,CAcE,OAAOS,GAAP,EAAY;AACZ,UAAMrB,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEX,gBADE;AAERa,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaT;AAFZ,KAAD,CAAT;AAID;AACF;AAED;;;AACA,SAASU,aAAT,CAAuBV,IAAvB,EAA6B;AAC3B,SAAOV,KAAK,CAACW,IAAN,CAAY,aAAYD,IAAI,CAACW,MAAO,UAApC,EAA+CX,IAA/C,CAAP;AACD;;AAED,UAAUY,UAAV,CAAqBT,MAArB,EAA6B;AAC3B,MAAI;AACF;AACA,UAAMd,KAAK,CAAC,IAAD,CAAX;AACA,UAAMH,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEZ,mBADE;AAERM,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOO,GAAP,EAAY;AACZ,UAAMrB,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEd,mBADE;AAERgB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaT;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUa,YAAV,GAAyB;AACvB,QAAMzB,UAAU,CAACQ,gBAAD,EAAmBM,OAAnB,CAAhB;AACD;;AAED,UAAUY,gBAAV,GAA6B;AAC3B,QAAM1B,UAAU,CAACK,mBAAD,EAAsBmB,UAAtB,CAAhB;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAMjC,GAAG,CAAC,CAACC,IAAI,CAAC8B,YAAD,CAAL,EAAqB9B,IAAI,CAAC+B,gBAAD,CAAzB,CAAD,CAAT;AACD","sourcesContent":["import {\r\n  all,\r\n  fork,\r\n  call,\r\n  take,\r\n  put,\r\n  takeEvery,\r\n  takeLatest,\r\n  delay,\r\n} from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport shortid from \"shortid\";\r\n\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\r\n\r\n/* ### 게시물 추가 ### */\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        data: action.data,\r\n      }\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n/* ### 댓글 추가 ### */\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchCommentPost() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSage() {\r\n  yield all([fork(watchAddPost), fork(watchCommentPost)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}